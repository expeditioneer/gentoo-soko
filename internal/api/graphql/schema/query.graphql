"Different queries that can be used to get packages data"
type Query {

    "A query to get a single category by any of the given parameters. Multiple parameters can be used. In case the category can not identified uniquely by the given parameters, an error is returned."
    category(
        "Search by the name of the category"
        Name: String,
        "Search by the description of the category"
        Description: String
    ): Category

    "A query to get a list of categories filtered by the given parameters. The returned list may be empty."
    categories(
        "Search by the name of the category"
        Name: String,
        "Search by the description of the category"
        Description: String
    ): [Category]


    "A query to get a single commit by any of the given parameters. Multiple parameters can be used. In case the commit can not identified uniquely by the given parameters, an error is returned."
    commit(
        "Search by the id that is the hash of the commit"
        Id: String,
        "Search by the number of preceding that were submitted prior to this commit"
        PrecedingCommits: Int,
        "Search by the full name of the author"
        AuthorName: String,
        "Search by the email address of the author"
        AuthorEmail: String,
        "Search by the date of the author"
        AuthorDate: Time,
        "Search by the full name of the committer"
        CommitterName: String,
        "Search by the email address of the committer"
        CommitterEmail: String,
        "Search by the date of the committer"
        CommitterDate: Time,
        "Search by the commit message"
        Message: String
    ): Commit

    "A query to get a list of commits filtered by the given parameters. The returned list may be empty."
    commits(
        "Search by the id that is the hash of the commit"
        Id: String,
        "Search by the number of preceding that were submitted prior to this commit"
        PrecedingCommits: Int,
        "Search by the full name of the author"
        AuthorName: String,
        "Search by the email address of the author"
        AuthorEmail: String,
        "Search by the date of the author"
        AuthorDate: Time,
        "Search by the full name of the committer"
        CommitterName: String,
        "Search by the email address of the committer"
        CommitterEmail: String,
        "Search by the date of the committer"
        CommitterDate: Time,
        "Search by the commit message"
        Message: String
    ): [Commit]


    "A query to get a single mask entry by any of the given parameters. Multiple parameters can be used. In case the mask entry can not identified uniquely by the given parameters, an error is returned."
    mask(
        "Search by the version identifier that has been used to select the masked versions"
        Versions: String,
        "Search by full name of the author of the mask entry"
        Author: String,
        "Search by the email address of the author of the mask entry"
        AuthorEmail: String,
        "Search by the date of the mask entry"
        Date: Time,
        "Search by the specified reason of the mask entry"
        Reason: String
    ): Mask

    "A query to get a list of mask entries filtered by the given parameters. The returned list may be empty."
    masks(
        "Search by the version identifier that has been used to select the masked versions"
        Versions: String,
        "Search by full name of the author of the mask entry"
        Author: String,
        "Search by the email address of the author of the mask entry"
        AuthorEmail: String,
        "Search by the date of the mask entry"
        Date: Time,
        "Search by the specified reason of the mask entry"
        Reason: String
    ): [Mask]


    "A query to get a single outdatedPackage by any of the given parameters. Multiple parameters can be used. In case the outdatedPackage can not identified uniquely by the given parameters, an error is returned."
    outdatedPackage(
        "Search by the atom of the package that is outdated"
        Atom: String,
        "Search by the latest version of the package in Gentoo tree"
        GentooVersion: String,
        "Search by the latest version of the package upstream"
        NewestVersion: String
    ): OutdatedPackage

    "A query to get a list of outdatedPackages filtered by the given parameters. The returned list may be empty."
    outdatedPackages(
        "Search by the atom of the package that is outdated"
        Atom: String,
        "Search by the latest version of the package in Gentoo tree"
        GentooVersion: String,
        "Search by the latest version of the package upstream"
        NewestVersion: String
    ): [OutdatedPackage]


    "A query to get a single pkgCheckResult by any of the given parameters. Multiple parameters can be used. In case the pkgCheckResult can not identified uniquely by the given parameters, an error is returned."
    pkgCheckResult(
        "Search by the package atom of the version that is affected by the pkgcheck result"
        Atom: String,
        "Search by the package category of the version that is affected by the pkgcheck result"
        Category: String,
        "Search by the package name of the version that is affected by the pkgcheck result"
        Package: String,
        "Search by the version identifier of the version that is affected by the pkgcheck result"
        Version: String,
        "Search by the CPV of the version that is affected by the pkgcheck result"
        CPV: String,
        "Search by the class of the pkgcheck warning, e.g. DeprecatedEapi"
        Class: String,
        "Search by the message of the pkgcheck warning, e.g. 'uses deprecated EAPI 5'"
        Message: String
    ): PkgCheckResult

    "A query to get a list of pkgCheckResults filtered by the given parameters. The returned list may be empty."
    pkgCheckResults(
        "Search by the package atom of the version that is affected by the pkgcheck result"
        Atom: String,
        "Search by the package category of the version that is affected by the pkgcheck result"
        Category: String,
        "Search by the package name of the version that is affected by the pkgcheck result"
        Package: String,
        "Search by the version identifier of the version that is affected by the pkgcheck result"
        Version: String,
        "Search by the CPV of the version that is affected by the pkgcheck result"
        CPV: String,
        "Search by the class of the pkgcheck warning, e.g. DeprecatedEapi"
        Class: String,
        "Search by the message of the pkgcheck warning, e.g. 'uses deprecated EAPI 5'"
        Message: String
    ): [PkgCheckResult]


    "A query to get a single package by any of the given parameters. Multiple parameters can be used. In case the package can not identified uniquely by the given parameters, an error is returned."
    package(
        "Search by the atom of the package"
        Atom: String,
        "Search by the category of the package"
        Category: String,
        "Search by the package name of the package"
        Name: String,
        "Search by the long description of the package"
        Longdescription: String,
        "Search by the number of preceding commits before the package was added"
        PrecedingCommits: Int
    ): Package

    "A query to get a list of packages filtered by the given parameters. The returned list may be empty."
    packages(
        "Search by the atom of the package"
        Atom: String,
        "Search by the category of the package"
        Category: String,
        "Search by the package name of the package"
        Name: String,
        "Search by the long description of the package"
        Longdescription: String,
        "Search by the number of preceding commits before the package was added"
        PrecedingCommits: Int
    ): [Package]

    "A query to get a list of packages filtered by the given search query. The returned list my be empty."
    packageSearch(
        "Search by the given query"
        searchTerm: String
        "Return the first result only"
        resultSize: Int
    ): [Package]

    "A query to get a single useflag by any of the given parameters. Multiple parameters can be used. In case the useflag can not identified uniquely by the given parameters, an error is returned."
    useflag(
        "Search by the id of the useflag"
        Id: String,
        "Search by the name of the useflag"
        Name: String,
        "Search by the scope of the useflag, e.g. local or global"
        Scope: String,
        "Search by the description of the useflag"
        Description: String,
        "Search by the use expand"
        UseExpand: String,
        "Search by the package that belongs to the useflag in case it is a local useflag"
        Package: String
    ): Useflag

    "A query to get a list of useflags filtered by the given parameters. The returned list may be empty."
    useflags(
        "Search by the id of the useflag"
        Id: String,
        "Search by the name of the useflag"
        Name: String,
        "Search by the scope of the useflag, e.g. local or global"
        Scope: String,
        "Search by the description of the useflag"
        Description: String,
        "Search by the use expand"
        UseExpand: String,
        "Search by the package that belongs to the useflag in case it is a local useflag"
        Package: String
    ): [Useflag]


    "A query to get a single version by any of the given parameters. Multiple parameters can be used. In case the version can not identified uniquely by the given parameters, an error is returned."
    version(
        "Search by the id of the version"
        Id: String,
        "Search by the category of the package of the version"
        Category: String,
        "Search by the package name of the version"
        Package: String,
        "Search by the atom of the package of the version"
        Atom: String,
        "Search by the version identifier of the version"
        Version: String,
        "Search by the slot of the version"
        Slot: String,
        "Search by the subslot of the version"
        Subslot: String,
        "Search by the EAPI of the ebuild of the version"
        EAPI: String,
        "Search by the keywords of the version"
        Keywords: String,
        "Search by the useflags of the version"
        Useflags: String,
        "Search by the restricts information of the version"
        Restricts: String,
        "Search by the properties of the version"
        Properties: String,
        "Search by the homepage of the version"
        Homepage: String,
        "Search by the license of the version"
        License: String,
        "Search by the description of the version"
        Description: String
    ): Version

    "A query to get a list of versions filtered by the given parameters. The returned list may be empty."
    versions(
        "Search by the id of the version"
        Id: String,
        "Search by the category of the package of the version"
        Category: String,
        "Search by the package name of the version"
        Package: String,
        "Search by the atom of the package of the version"
        Atom: String,
        "Search by the version identifier of the version"
        Version: String,
        "Search by the slot of the version"
        Slot: String,
        "Search by the subslot of the version"
        Subslot: String,
        "Search by the EAPI of the ebuild of the version"
        EAPI: String,
        "Search by the keywords of the version"
        Keywords: String,
        "Search by the useflags of the version"
        Useflags: String,
        "Search by the restricts information of the version"
        Restricts: String,
        "Search by the properties of the version"
        Properties: String,
        "Search by the homepage of the version"
        Homepage: String,
        "Search by the license of the version"
        License: String,
        "Search by the description of the version"
        Description: String
    ): [Version]


    "A query to get the application information."
    application: Application

    "A query to get the last commit time."
    lastCommitTime: Time

    #
    # Shortcuts for convenience and easy migration
    #
    "A query to get the latest added packages. You have to specify the number of added packages that should be returned."
    addedPackages(
        "The number of added packages that should be returned"
        Limit: Int
    ): [Package]

    "A query to get the latest updated versions. You have to specify the number of updated versions that should be returned."
    updatedVersions(
        "The number of updated versions that should be returned"
        Limit: Int
    ): [Version]

    "A query to get the latest stabilized versions. You have to specify the number of stabilized versions that should be returned."
    stabilizedVersions(
        "The number of stabilized versions that should be returned"
        Limit: Int,
        "The arch that should be used to filter the results"
        Arch: String
    ): [Version]

    "A query to get the latest keyworded versions. You have to specify the number of keyworded versions that should be returned."
    keywordedVersions(
        "The number of keyworded versions that should be returned"
        Limit: Int,
        "The arch that should be used to filter the results"
        Arch: String
    ): [Version]
}
